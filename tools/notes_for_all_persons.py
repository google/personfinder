#!/usr/bin/python2.7
# Copyright 2015 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Command-line utility: generate XML note files that can be posted to the
API to add a note to all the person records in a repo.  (We use the API
to do this rather than the import mechanism so that subscribers will get
notified; see the call to importer.import_records in api.Write.post.)

To use:

    tools/console google.org/personfinder
    User e-mail: you@google.com
    Password: <enter your ASP>
    Connected to: https://google.org:443/personfinder
    from model import *
    from setup_pf import *
    s~googlepersonfinder> import notes_for_all_persons
    s~googlepersonfinder> notes_for_all_persons.write_notes_for_nepal()

The result will be a series of files in /tmp that you can then post to
the Person Finder API to write the notes to the datastore.
"""

from model import *
import atom
import datetime
import logging

logging.basicConfig()
logging.getLogger().setLevel(logging.INFO)


def all_person_record_ids(repo, batch_size=100):
    """Generates all the record IDs of persons in the given repo."""
    query = Person.all(keys_only=True).filter('repo =', repo)
    batch = query.fetch(batch_size)
    while batch:
        logging.info('fetched %d person IDs' % len(batch))
        for key in batch:
            repo, record_id = key.name().split(':', 1)
            yield record_id
        batch = query.with_cursor(query.cursor()).fetch(batch_size)  # continue where fetch left off

def write_notes_for_all_in_repo(
        basename, repo, date, status, text, batch_size=100):
    """Writes XML Atom feeds of notes, one for every person in the repo."""
    note_dicts = []
    for person_record_id in all_person_record_ids(repo):
        # Generate a note record ID that (a) can never collide with a future
        # generated note record ID and (b) is a function of the person record
        # ID to ensure that at most one note is created per person regardless
        # of how many times this function is executed.
        domain, id = person_record_id.split('/', 1)
        note_record_id = domain + '/note.system01-' + id
        note_dicts.append({
            'note_record_id': note_record_id,
            'person_record_id': person_record_id,
            'author_name': 'Google Person Finder',
            'source_date': date,
            'status': status,
            'text': text
        })
    for i in range(0, len(note_dicts), batch_size):
        filename = basename + '.' + str(i) + '.xml'
        file = open(filename, 'w')
        atom.ATOM_PFIF_1_4.write_note_feed(
            file,
            note_dicts[i:i + batch_size],
            url='',
            title='Notes generated by notes_for_all_persons.py',
            subtitle='',
            updated=datetime.datetime.utcnow()
        )
        file.close()
        logging.info('wrote ' + filename)

def write_notes_for_nepal():
    """Writes XML Atom feeds of notes for the Nepal reactivation."""
    message = '''
    Another major earthquake occurred in Nepal on May 12 at 12:35 Nepali time.  Information previously entered here remains present, but may not have been updated since the more recent earthquake.  If you have new information on this person, please add a note here with their updated status.
    '''.strip()

    write_notes_for_all_in_repo(
        '/tmp/nepal-notes',
        '2015-nepal-earthquake',
        date='2015-05-12T06:50:00Z',
        status='information_sought',
        text=message
    )
