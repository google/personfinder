#!/bin/bash

pushd "$(dirname $0)" >/dev/null && source common.sh && popd >/dev/null

# yapf can fix things automatically, but pylint is more thorough. I expect the
# set of things yapf is happy with will grow faster than the set of things
# pylint is happy with, so we separate these lists.
DEFAULT_YAPF_FILES="app/views/admin/base.py \
                    tests/test_searcher.py \
                    tests/test_xsrftool.py \
                    tests/views/test_admin_create_repo.py"
DEFAULT_PYLINT_FILES="app/views/admin/base.py \
                      tests/test_searcher.py \
                      tests/test_xsrftool.py \
                      tests/views/test_admin_create_repo.py"

# Call through python -m instead of directly, so that you're sure to be able to
# use it even if you installed the tools through pip.
YAPF="python -m yapf --style google"
# pylint will complain about TODOs, so disable that with "--disable fixme"
PYLINT="python -m pylint --disable fixme"

command="$1"
file_list="${@:2:999}"

if [ "$file_list" == "" ]; then
    if [ "$command" == "yapf-fix" -o "$command" == "yapf-check" ]; then
        file_list=$DEFAULT_YAPF_FILES
    elif [ "$command" == "pylint-check" ]; then
        file_list=$DEFAULT_PYLINT_FILES
    fi
fi

if [ "$command" == "yapf-fix" ]; then
    $YAPF -i $file_list
elif [ "$command" == "yapf-check" ]; then
    $YAPF -d $file_list
elif [ "$command" == "pylint-check" ]; then
    $PYLINT $file_list
else
    echo "Usage: tools/lint [yapf-fix|yapf-check|pylint-check]"
fi
