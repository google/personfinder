// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`testing RepoHome snapshot test for RepoHome 1`] = `
<InjectIntl(RepoHome)
  match={
    Object {
      "params": Object {
        "repoId": "albany",
      },
    }
  }
>
  <RepoHome
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {},
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": null,
      }
    }
    match={
      Object {
        "params": Object {
          "repoId": "albany",
        },
      }
    }
  >
    <div>
      <InjectIntl(RepoHeader)
        backButtonTarget="/"
        repo={
          Object {
            "recordCount": 100,
            "repoId": "albany",
            "title": "Albany",
          }
        }
      >
        <RepoHeader
          backButtonTarget="/"
          intl={
            Object {
              "defaultFormats": Object {},
              "defaultLocale": "en",
              "formatDate": [Function],
              "formatHTMLMessage": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatPlural": [Function],
              "formatRelative": [Function],
              "formatTime": [Function],
              "formats": Object {},
              "formatters": Object {
                "getDateTimeFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralFormat": [Function],
                "getRelativeFormat": [Function],
              },
              "locale": "en",
              "messages": Object {},
              "now": [Function],
              "onError": [Function],
              "textComponent": "span",
              "timeZone": null,
            }
          }
          repo={
            Object {
              "recordCount": 100,
              "repoId": "albany",
              "title": "Albany",
            }
          }
        >
          <div
            id="repoheader"
          >
            <div
              id="repoheader-backbutton"
            >
              <Link
                replace={false}
                to="/"
              >
                <a
                  href="/"
                  onClick={[Function]}
                >
                  <div>
                    <img
                      src="/static/icons/maticon_arrow_back.svg"
                    />
                  </div>
                </a>
              </Link>
            </div>
            <div
              id="repoheader-info"
            >
              <p
                className="mdc-typography--subtitle1"
              >
                <FormattedMessage
                  defaultMessage="Google Person Finder"
                  id="RepoHeader.productName"
                  values={Object {}}
                >
                  <span>
                    Google Person Finder
                  </span>
                </FormattedMessage>
              </p>
              <p
                className="mdc-typography--subtitle2"
              >
                Albany
              </p>
            </div>
          </div>
        </RepoHeader>
      </InjectIntl(RepoHeader)>
      <div
        className="repohome-body"
      >
        <InjectIntl(SearchBar)
          initialValue=""
          onSearch={[Function]}
          repoId="albany"
        >
          <SearchBar
            initialValue=""
            intl={
              Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": Object {},
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": null,
              }
            }
            onSearch={[Function]}
            repoId="albany"
          >
            <TextField
              className="searchbar"
              dense={false}
              floatingLabelClassName=""
              fullWidth={false}
              label="Search for a person"
              lineRippleClassName=""
              notchedOutlineClassName=""
              outlined={true}
              textarea={false}
            >
              <div
                className="mdc-text-field searchbar mdc-text-field--outlined"
                key="text-field-container"
                onClick={[Function]}
                onKeyDown={[Function]}
              >
                <Input
                  className=""
                  disabled={false}
                  foundation={
                    MDCTextFieldFoundation {
                      "adapter_": Object {
                        "activateLineRipple": [Function],
                        "addClass": [Function],
                        "closeOutline": [Function],
                        "deactivateLineRipple": [Function],
                        "deregisterInputInteractionHandler": [Function],
                        "deregisterTextFieldInteractionHandler": [Function],
                        "deregisterValidationAttributeChangeHandler": [Function],
                        "floatLabel": [Function],
                        "getLabelWidth": [Function],
                        "getNativeInput": [Function],
                        "hasClass": [Function],
                        "hasLabel": [Function],
                        "hasOutline": [Function],
                        "isFocused": [Function],
                        "notchOutline": [Function],
                        "registerInputInteractionHandler": [Function],
                        "registerTextFieldInteractionHandler": [Function],
                        "registerValidationAttributeChangeHandler": [Function],
                        "removeClass": [Function],
                        "setLineRippleTransformOrigin": [Function],
                        "shakeLabel": [Function],
                      },
                      "characterCounter_": undefined,
                      "helperText_": undefined,
                      "inputBlurHandler_": [Function],
                      "inputFocusHandler_": [Function],
                      "inputInputHandler_": [Function],
                      "isFocused_": false,
                      "isValid_": true,
                      "leadingIcon_": undefined,
                      "receivedUserInput_": false,
                      "setPointerXOffset_": [Function],
                      "textFieldInteractionHandler_": [Function],
                      "trailingIcon_": undefined,
                      "useNativeValidation_": true,
                      "validationAttributeChangeHandler_": [Function],
                      "validationObserver_": undefined,
                    }
                  }
                  handleFocusChange={[Function]}
                  handleValueChange={[Function]}
                  id=""
                  inputType="input"
                  onChange={[Function]}
                  onKeyDown={[Function]}
                  setDisabled={[Function]}
                  setInputId={[Function]}
                  syncInput={[Function]}
                  value=""
                >
                  <input
                    className="mdc-text-field__input"
                    disabled={false}
                    id=""
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onMouseDown={[Function]}
                    onTouchStart={[Function]}
                    value=""
                  />
                </Input>
                <NotchedOutline
                  className=""
                  notch={false}
                  notchWidth={0}
                >
                  <div
                    className="mdc-notched-outline mdc-notched-outline--upgraded"
                  >
                    <div
                      className="mdc-notched-outline__leading"
                    />
                    <div
                      className="mdc-notched-outline__notch"
                      style={
                        Object {
                          "width": undefined,
                        }
                      }
                    >
                      <FloatingLabel
                        className=""
                        float={false}
                        handleWidthChange={[Function]}
                        htmlFor=""
                      >
                        <label
                          className="mdc-floating-label"
                          htmlFor=""
                          onAnimationEnd={[Function]}
                        >
                          Search for a person
                        </label>
                      </FloatingLabel>
                    </div>
                    <div
                      className="mdc-notched-outline__trailing"
                    />
                  </div>
                </NotchedOutline>
              </div>
            </TextField>
          </SearchBar>
        </InjectIntl(SearchBar)>
        <p
          className="mdc-typography--body1 repohome-recordcount"
        >
          <FormattedMessage
            defaultMessage="Currently tracking {recordCount} records"
            id="RepoHome.repoRecordCount"
            values={
              Object {
                "recordCount": 100,
              }
            }
          >
            <span>
              Currently tracking 100 records
            </span>
          </FormattedMessage>
        </p>
        <EndBarHeader>
          <div
            className="endbars-headerline-wrapper"
            dir="ltr"
          >
            <span
              className="mdc-typography--overline endbars-headerline"
            >
              <FormattedMessage
                defaultMessage="Or"
                id="RepoHome.or"
                values={Object {}}
              >
                <span>
                  Or
                </span>
              </FormattedMessage>
            </span>
          </div>
        </EndBarHeader>
        <RippledComponent
          className="pf-button-secondary"
          disabled={false}
          initRipple={[Function]}
          onBlur={[Function]}
          onClick={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseUp={[Function]}
          onTouchEnd={[Function]}
          onTouchStart={[Function]}
          raised={true}
          style={Object {}}
          unbounded={false}
        >
          <Component
            className="pf-button-secondary"
            disabled={false}
            initRipple={[Function]}
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchStart={[Function]}
            raised={true}
            style={Object {}}
          >
            <button
              className="mdc-button pf-button-secondary mdc-button--raised"
              disabled={false}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchStart={[Function]}
              style={Object {}}
            >
              <span
                className="mdc-button__label"
              >
                Provide information about someone
              </span>
            </button>
          </Component>
        </RippledComponent>
      </div>
      <InjectIntl(Footer)>
        <Footer
          intl={
            Object {
              "defaultFormats": Object {},
              "defaultLocale": "en",
              "formatDate": [Function],
              "formatHTMLMessage": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatPlural": [Function],
              "formatRelative": [Function],
              "formatTime": [Function],
              "formats": Object {},
              "formatters": Object {
                "getDateTimeFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralFormat": [Function],
                "getRelativeFormat": [Function],
              },
              "locale": "en",
              "messages": Object {},
              "now": [Function],
              "onError": [Function],
              "textComponent": "span",
              "timeZone": null,
            }
          }
        >
          <div
            className="footer"
          >
            <p
              className="mdc-typography--body1"
            >
              <FormattedMessage
                defaultMessage="PLEASE NOTE: All data entered is available to the public and usable by anyone. Google does not review or verify the accuracy of this data. Google may share the data with public and private organizations participating in disaster response efforts."
                id="Footer.disclaimerText"
                values={Object {}}
              >
                <span>
                  PLEASE NOTE: All data entered is available to the public and usable by anyone. Google does not review or verify the accuracy of this data. Google may share the data with public and private organizations participating in disaster response efforts.
                </span>
              </FormattedMessage>
            </p>
          </div>
        </Footer>
      </InjectIntl(Footer)>
    </div>
  </RepoHome>
</InjectIntl(RepoHome)>
`;
